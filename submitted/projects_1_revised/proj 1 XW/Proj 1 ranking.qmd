---
title: Xiao Wei
jupyter: python3
---



This problem explores loading tournament data into graph format and producing rankings using matrix arithmetic/algebra. It explores using simple rank, power rank, and inverse pagerank as different ranking algorithms and compares/contrasts each method.

```{python}
import sympy as sym
import numpy as np
import pandas as pd
import networkx as nx
sb = sym.Symbol
sm = sym.Matrix
```

Loading the data into networkx

```{python}
G = nx.DiGraph()
G.add_nodes_from([1, 2, 3, 4, 5, 6, 7])
G.add_edges_from([(1, 2), (7, 3), (2, 4), (4, 5), (3, 2), (5, 1), (6, 1), (3, 1), (7, 2), (2, 6), (3, 4), (7, 4)
                  , (5, 7), (6, 4), (3, 5), (5, 6), (7, 1), (5, 2), (7, 6), (1, 4), (6, 3)])
```

Draw the graph

```{python}
nx.draw(G, with_labels=True)
```

#### adjacency matrix

```{python}
adj_mat = nx.to_numpy_array(G)
adj_mat
```

#### win-loss record

```{python}
wins = adj_mat.sum(axis=1)
wins
```

```{python}
losses = adj_mat.sum(axis=0)
losses
```

### Simple Rank
Here is the simple ranking for each team/node by wins

```{python}
team = pd.DataFrame({'wins': wins, 'losses': losses}, index=range(1, 8))
team.sort_values(['wins', 'losses'], ascending=[False, True])
```

#### Vertex Power

Power ranking: A + A^2

```{python}
power_rank = (adj_mat + adj_mat**2).sum(axis=1)
pd.Series(power_rank, index=range(1, 8)).sort_values(ascending=False)
```

#### Reverse PageRank

Here I transform the adjacency matrix into a stochastic transition matrix by dividing each column by the sum of degrees

```{python}
col_sums = adj_mat.sum(axis=0)
P = np.zeros(adj_mat.shape)
for i in range(adj_mat.shape[0]):
    P[i, :] = adj_mat[i, :] / col_sums
pd.DataFrame(P)
```

As per instructions, 85% chance of using the transition matrix and 15% chance of teleportation to a random node

```{python}
alpha = 0.85
v = sym.ones(adj_mat.shape[0])[:, 0] / adj_mat.shape[0]
v
```

Formula:

(I - aP)

```{python}
pg_mat = (sym.eye(P.shape[0]) - alpha * P)
pg_mat
```

solving for:

(I - aP)x = (1 - a)v

The output is the reverse page rank ranking

```{python}
pd.Series(list(pg_mat.gauss_jordan_solve(v* (1-alpha))[0]), index=range(1, 8)).sort_values(ascending=False)
```

#### Weighted graph power ranking

I add weights using networkx and output the resulting weighted adjacency matrix

```{python}
Gw = nx.DiGraph()
Gw.add_nodes_from([1, 2, 3, 4, 5, 6, 7])
Gw.add_weighted_edges_from([(1, 2, 4), (7, 3, 8), (2, 4, 7), (4, 5, 3), (3, 2, 7), (5, 1, 7), (6, 1, 23)
                            , (3, 1, 15), (7, 2, 6), (2, 6, 18), (3, 4, 13), (7, 4, 14)
                  , (5, 7, 7), (6, 4, 13), (3, 5, 7), (5, 6, 18), (7, 1, 45), (5, 2, 10), (7, 6, 19), (1, 4, 13), (6, 3, 13)])
adj_matw = nx.to_numpy_array(Gw)
adj_matw
```

The power rank using weighted edges

```{python}
pd.Series((adj_matw + adj_matw**2).sum(axis=1), index=range(1, 8)).sort_values(ascending=False)
```


